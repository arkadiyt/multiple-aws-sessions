long time pain point
conceptually knew it was possible to hook or modify cookies (though there are some really important changes in chrome v2 / v3 manifests around _how_ to do this)
thought: what if I could keep track of which tab receives which cookies. Then on any outgoing request from the tab, replace the cookies it sends with the ones received previoiusly for that tab
started playing around in devtools inspector, aws sets more than a dozen cookies across various domains, regional endpoints, etc
  but by playing around with it, for instance by deleting a cookie and seeing if i was still logged in on refresh, narrowed it down to just 3 cookies: aws-creds, aws-userInfo, and aws-userInfo-signed
got a basic chrome extension working that hooked those cookies, but i was still getting logged out. why?
  - dumb cookie overwriting thing with cookiejar, probably not worth mentioning
  - opened up burp suite and started comparing my requests to unmodified logins. noticed that aws-creds value was changing, e.g. received <sample value> in set-cookie response, but then later the browser was sending <modifed value>
  - looks like they use javascript to modify it? (wrong)
  - time to reverse engineer. had to find where in javascript the change is happening, but there's a lot of javascript loaded. injected a script to trigger the debugger
got past that error, home screen is loading successfully now, nice! but any page load gives me signed out error
spent a huge amount of time re-implementing cookie rules
made some progress - could successfully delete aws-creds cookies and stay signed in. Without the extension deleting those cookies logs you out. But deleting aws-userinfo/aws-userinfo-signed still immediately logged you out via javascript. Those cookies did not have httpOnly set. So it wasn't sufficient to fake the cookie jar to the server, I also had to trick the javascript on the page that it was getting the cookies it wanted too
hooked document.cookie, and needed to inject script from content-script into page
spent like 2 days debugging why my rules weren't matching, turns out I had the priority on reverse order


----

trying to debug layout issues, difficult because JS is minified and don't have access to originals (sourcemaps included but give 403 when fetched, maybe only accessible to their vpn?)
trying to go up callstack from where error is injected, but i get into react rendering. the state modification / business logic is not in the callstack, i already missed it
install react devtools to inspect state and find it that way, proved extremely helpful for finding dom event handlers -> click handlers etc
this was due to failing calls to userpref service, was getting 401s. That was due to some missing cookies because they were being set on "script" resource types which I wasn't targeting
